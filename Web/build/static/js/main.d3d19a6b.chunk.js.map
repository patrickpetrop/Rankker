{"version":3,"sources":["components/HomePage.js","redux/actions/actionTypes.js","api/rankker.js","redux/actions/userActions.js","components/AboutPage.js","redux/actions/movieActions.js","components/movies/MovieListItem.js","components/movies/MoviePage.js","components/common/Header.js","components/App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/movieReducer.js","redux/reducers/userReducer.js","index.js","redux/configureStore.js"],"names":["HomePage","React","Component","connect","state","user","LOAD_MOVIES_SUCCESS","GET_TOKEN_SUCCESS","transformMovie","movie","MovieApi","getAllMovies","axios","get","BASE_URL","then","result","console","log","data","sort","Math","random","slice","map","UserApi","getToken","post","dispatch","type","types","getTokenSuccess","catch","error","AboutPage","this","props","actions","localStorage","setItem","accessToken","userName","bindActionCreators","userActions","loadMovies","movies","loadMoviesSuccess","MovieListItem","key","imdbId","name","src","tmdbPosterPath","alt","overview","MoviePage","length","alert","i","movieActions","Header","activeStyle","color","to","exact","App","className","path","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","initialState","action","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3d19a6b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nclass HomePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Home Page</p>\r\n        <h2>\r\n          This will be the homepage for the Upcoming Patrick Petropoulos\r\n          portfolio\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nHomePage.propTypes = {\r\n  user: PropTypes.object.isRequired\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    user: state.user\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(HomePage);\r\n","export const LOAD_MOVIES_SUCCESS = \"LOAD_MOVIES_SUCCESS\";\r\n\r\nexport const GET_TOKEN_SUCCESS = \"GET_TOKEN_SUCCESS\";\r\n","import axios from \"axios\";\r\n\r\nexport const BASE_URL = \"https://localhost:44390/\";\r\n\r\nexport type MovieGenre = {\r\n  source: String,\r\n  sourceName: String,\r\n  sourceId: Number\r\n};\r\n\r\nexport type Movie = {\r\n  imdbId: String,\r\n  movieGenres: Array<MovieGenre>,\r\n  name: String,\r\n  overView: String,\r\n  releaseDate: String,\r\n  runTime: Number,\r\n  tmdbBackdropPath: String,\r\n  tmdbId: Number,\r\n  tmdbPosterPath: String\r\n};\r\n\r\nconst transformMovie = (movie: Object): Movie => ({\r\n  ...movie\r\n});\r\n\r\nexport const MovieApi = {\r\n  getAllMovies(): Promise<Array<Movie>> {\r\n    return axios.get(BASE_URL + \"api/populate\").then(result => {\r\n      console.log(result.data);\r\n      return result.data\r\n        .sort(() => Math.random() - Math.random())\r\n        .slice(0, 15)\r\n        .map(transformMovie);\r\n    });\r\n  }\r\n};\r\n\r\nexport type Token = {\r\n  access_Token: String,\r\n  userName: String\r\n};\r\nconst transformToken = (token: Object): Token => ({\r\n  ...token\r\n});\r\n\r\nexport const UserApi = {\r\n  getToken(): Promise<Token> {\r\n    return axios\r\n      .post(BASE_URL + \"token?username=p1&password=Pwd12345.\")\r\n      .then(result => {\r\n        return result.data;\r\n      });\r\n  }\r\n};\r\n","import * as types from \"./actionTypes\";\r\nimport {UserApi} from \"../../api/rankker\";\r\n\r\nexport function getTokenSuccess(user) {\r\n  return { type: types.GET_TOKEN_SUCCESS, user };\r\n}\r\n\r\nexport function getToken() {\r\n  //dispatch is injected automaticallt from thunk, so we dont have to pass it\r\n  return function(dispatch) {\r\n    return UserApi\r\n      .getToken()\r\n      .then(user => {\r\n        dispatch(getTokenSuccess(user));\r\n      })\r\n      .catch(error => {\r\n        throw error;\r\n      });\r\n  };\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as userActions from \"../redux/actions/userActions\";\r\n\r\nclass AboutPage extends React.Component {\r\n  componentDidMount() {\r\n    const { actions } = this.props;\r\n    actions\r\n      .getToken()\r\n      .then(() => {})\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.user && localStorage.setItem(\"accessToken\", this.props.user.accessToken)}\r\n        <h2>About Page</h2>\r\n        <p>{this.props.user.userName}</p>\r\n        <p>{this.props.user.accessToken}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAboutPage.propTypes = {\r\n  actions: PropTypes.object.isRequired\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    user: state.user\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      getToken: bindActionCreators(userActions.getToken, dispatch)\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AboutPage);\r\n","import * as types from \"./actionTypes\";\r\nimport {MovieApi} from \"../../api/rankker\";\r\n\r\nexport function loadMoviesSuccess(movies) {\r\n  return { type: types.LOAD_MOVIES_SUCCESS, movies };\r\n}\r\n\r\nexport function loadMovies() {\r\n  //dispatch is injected automaticallt from thunk, so we dont have to pass it\r\n  return function(dispatch) {\r\n    return MovieApi\r\n      .getAllMovies()\r\n      .then(movies => {\r\n        dispatch(loadMoviesSuccess(movies));\r\n      })\r\n      .catch(error => {\r\n        throw error;\r\n      });\r\n  };\r\n}","import React from \"react\";\r\n\r\nexport default function MovieListItem({ movie }) {\r\n  return (\r\n    <tr key={movie.imdbId}>\r\n      <td>{movie.name}</td>\r\n      <td>{movie.imdbId}</td>\r\n      <td>\r\n        <img\r\n          src={\"https://image.tmdb.org/t/p/w92/\" + movie.tmdbPosterPath}\r\n          alt={movie.overview}\r\n        />\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as movieActions from \"../../redux/actions/movieActions\";\r\nimport MovieListItem from \"./MovieListItem\";\r\n\r\nclass MoviePage extends React.Component {\r\n  componentDidMount() {\r\n    const { movies, actions } = this.props;\r\n    if (movies.length === 0) {\r\n      actions.loadMovies().catch(error => {\r\n        alert(\"Loading authors failed \" + error);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Hello</h2>\r\n        <h2>Logged in user is {this.props.user.userName}</h2>\r\n        <p>Length of movie array is {this.props.movies.length}</p>\r\n        <table>\r\n          <tbody>\r\n            {this.props.movies.map((movie, i) => {\r\n              return <MovieListItem key={i} movie={movie} />;\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMoviePage.propTypes = {\r\n  movies: PropTypes.array.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n  actions: PropTypes.object.isRequired\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state.movies,\r\n    user: state.user\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      loadMovies: bindActionCreators(movieActions.loadMovies, dispatch)\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  const activeStyle = { color: \"#F15B2A\" };\r\n\r\n  return (\r\n    <nav>\r\n      <NavLink to=\"/\" activeStyle={activeStyle} exact>\r\n        Home\r\n      </NavLink>\r\n      {\" | \"}\r\n      <NavLink to=\"/movies\" activeStyle={activeStyle}>\r\n        Movies\r\n      </NavLink>\r\n      {\" | \"}\r\n      <NavLink to=\"/about\" activeStyle={activeStyle}>\r\n        About\r\n      </NavLink>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport HomePage from \"./HomePage\";\r\nimport AboutPage from \"./AboutPage\";\r\nimport MoviePage from \"./movies/MoviePage\";\r\nimport Header from \"./common/Header\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route path=\"/about\" component={AboutPage} />\r\n        {/* <Route path=\"/movies\" component={MoviePage} /> */}\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\r\n  movies: [],\r\n  user: {}\r\n};\r\n","import { combineReducers } from \"redux\";\r\n//remaned since it is default export in file\r\nimport movies from \"./movieReducer\";\r\nimport user from './userReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  movies,\r\n  user\r\n});\r\n\r\nexport default rootReducer;","import * as types from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function movieReducer(state = initialState.movies, action) {\r\n  switch (action.type) {\r\n    case types.LOAD_MOVIES_SUCCESS:\r\n      return action.movies;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as types from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function userReducer(state = initialState.user, action) {\r\n  switch (action.type) {\r\n    case types.GET_TOKEN_SUCCESS:\r\n      console.log(action);\r\n      return action.user;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport configureStore from \"./redux/configureStore\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\r\n//thunk added\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport default function configureStore(initialState) {\r\n  const composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\r\n  );\r\n}\r\n"],"sourceRoot":""}